i
Nota para atualização de dependências

Este documento irá te auxiliar à fazer a aula, com a versão mais recente do Spring Boot e suas dependências. Atualmente a versão mais recente do Spring Boot é a 2.1.5.

Observação: Este documento é apenas para os que querem usar as versões mais recentes das dependências contidas nesta aula. Ao longo do curso iremos atualizar as dependências, mas caso queira atualizar agora, use este documento como guia.
1. Sobre a aula

Para a nossa classe de configuração, pouca coisa mudará. Mas vamos tentar rodar a aplicação, usando o mesmo código e chamar nossa API.

Se chamarmos a API, mesmo que passando a autenticação mostrada na aula, através do Postman, podemos notar o seguinte erro:
java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id "null"

Isso é porque, antes da versão 5 do Spring, não era necessário explicitar qual PasswordEncoder utilizar para “decodificar” a senha de usuário. Por padrão o Spring nos fornecia uma classe chama NoOpPasswordEncoder, que na verdade não realizaria nenhuma “decodificação”.

Como estamos declarando a senha de usuário como texto puro (admin), não precisamos de decodificá-la, então precisamos declarar o NoOpPasswordEncoder, e temos duas formas de fazer isso:
Declarando o encoder direto na senha

Para este caso, podemos passar entre chaves o ID do Encoder que desejamos utilizar, como a senha não está criptografada, vamos utilizar o {noop}.

Caso nossa senha estivesse criptografa com BCrypt (por exemplo), poderíamos utilizar {bcrypt}

@Override
protected void configure(AuthenticationManagerBuilder auth) throws Exception {
  auth.inMemoryAuthentication()
      .withUser("admin").password("{noop}admin").roles("ROLE");
}

Adicionando informações dos usuários, através de Bean

Para este caso, criamos as informações de usuário, criando um Bean UserDetailsService, que já nos devolve uma instância com o PasswordEncoder padrão.

Nota-se que este método está depreciado, pois não é algo considerado seguro, apenas para demonstrações, e nas próximas aulas vamos fazer da forma segura!

@Bean
public UserDetailsService userDetailsService() {
    User.UserBuilder builder = User.withDefaultPasswordEncoder();
    InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();
    manager.createUser(builder.username("admin").password("admin").roles("ROLE").build());
    return manager;
}


