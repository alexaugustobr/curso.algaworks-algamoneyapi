

Nota para atualização de dependências

Este documento irá te auxiliar à fazer a aula, com a versão mais recente do Spring Boot e suas dependências. Atualmente a versão mais recente do Spring Boot é a 2.1.5.

Observação: Este documento é apenas para os que querem usar as versões mais recentes das dependências contidas nesta aula. Ao longo do curso iremos atualizar as dependências, mas caso queira atualizar agora, use este documento como guia.
1. Sobre a aula

Para essa aula, precisaremos fazer algumas adaptações em nosso código para que ele possa funcionar
2. ResourceServerConfig

Nesta classe sobrescrevemos um novo método configure para referenciar o nosso UserDetailsService, não será mais necessário.

Também iremos remover a anotação @EnableWebSecurity, ficando assim:

@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter {

	@Override
	public void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
				.antMatchers("/categorias").permitAll()
				.anyRequest().authenticated()
				.and()
			.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
			.csrf().disable();
	}

	@Override
	public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
		resources.stateless(true);
	}
}

3. AuthorizationServerConfig
Secret

Iremos alterar a secret do nosso cliente angular para que ela seja encodada com BCrypt, para isso podemos usar a classe utilitária GeradorSenha, inserindo o valor @ngul@r0 para ser encodado.

Depois de alterado o código deverá parecer com esse:

@Override
public void configure(ClientDetailsServiceConfigurer clients) throws Exception {

    clients.inMemory()
            .withClient("angular")
            .secret("$2a$10$G1j5Rf8aEEiGc/AET9BA..xRR.qCpOUzBZoJd8ygbGy6tb3jsMT9G")
            .scopes("read", "write")
            .authorizedGrantTypes("password", "refresh_token")
            .accessTokenValiditySeconds(1800)
            .refreshTokenValiditySeconds(3600 * 24);
}

UserDetailsService

Anteriormente fazíamos referência à UserDetailsService em nosso ResourceServerConfig. Agora iremos trazer essa referência para o AuthorizationServerConfig:

@Autowired
private UserDetailsService userDetailsService;

No método configure que recebe um AuthorizationServerEndpointsConfigurer como argumento, o passaremos para o método userDetailsService(...):

@Override
public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
    endpoints
        .tokenStore(tokenStore())
        .accessTokenConverter(this.accessTokenConverter())
        .reuseRefreshTokens(false)
        .userDetailsService(this.userDetailsService)
        .authenticationManager(this.authenticationManager);
}

4. OAuthSecurityConfig

Criaremos uma nova classe com o nome de OAuthSecurityConfig.

A anotação que removemos do ResourceServerConfig, iremos colocar nessa nova classe e também iremos estender a classe WebSecurityConfigurerAdapter.

@Configuration
@EnableWebSecurity
public class OAuthSecurityConfig extends WebSecurityConfigurerAdapter {
//...
}

Com as atualizações do Spring Security, não há um Bean para AuthenticationManager que é fornecido por padrão pelo Spring, para isso precisamos definir esse Bean por conta própria.

Para isso, podemos sobrescrever o método authenticationManager() da classe WebSecurityConfigurerAdapter:

@Bean
@Override
public AuthenticationManager authenticationManager() throws Exception {
    return super.authenticationManager();
}

Definiremos também aqui, o Bean do nosso passwordEncoder (que será usado para fazer o decode da senha do usuário e da secret do cliente:

@Bean
public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
}


